<?php

/**
 * @file
 * Module for for base Commerce Saferpay module.
 */

/**
 * The supported api version.
 */
const SAFERPAY_API_VERSION = '1.12';

/**
 * Saferpay captured status.
 */
const SAFERPAY_CAPTURED = 'CAPTURED';

/**
 * Saferpay authorised status.
 */
const SAFERPAY_AUTHORIZED = 'AUTHORIZED';

/**
 * Common settings form elements.
 *
 * @param array $settings
 *   An array of the current settings.
 * @param bool $jsonapi
 *   If jsonapi settings should be used.
 *
 * @return
 *   A form snippet.
 *
 * @see CALLBACK_commerce_payment_method_settings_form()
 */
function commerce_saferpay_settings_form($settings = NULL, $jsonapi = FALSE) {

  $settings = commerce_saferpay_apply_default_settings($settings, $jsonapi);

  if (!$jsonapi) {
    $form['account_id'] = array(
      '#type' => 'textfield',
      '#title' => t('Account ID'),
      '#description' => t('You can derive the AccountID as follows: CUSTOMERID-TERMINALID, i.e. 401860-17795278 (See https://www.six-payment-services.com/en/site/saferpay-support/testaccount/general_test_account.html)'),
      '#default_value' => $settings['account_id'],
      '#weight' => 0,
    );

    $form['password'] = array(
      '#type' => 'textfield',
      '#title' => t('spPassword'),
      '#description' => t('This is only kept for backwards compatibility and is not needed anymore.'),
      '#default_value' => $settings['password'],
      '#weight' => 5,
    );
  }
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#description' => t('The saferpay domain to use, use https://test.saferpay.com for a test account, https://www.saferpay.com for production..'),
    '#default_value' => $settings['domain'],
    '#weight' => 10,
  );

  $form['payment_methods'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled payment methods'),
    '#options' => array(
      1 => t('MasterCard'),
      2 => t('Visa'),
      3 => t('American Express'),
      4 => t('Diners Club'),
      5 => t('JCB'),
      6 => t('Saferpay Testkarte'),
      8 => t('Bonus Card'),
      9 => t('PostFinance E-Finance'),
      10 => t('PostFinance Card'),
      11 => t('Maestro International'),
      12 => t('MyOne'),
      13 => t('Direct debit (ELV)'),
      14 => t('Invoice'),
      15 => t('SofortÃ¼berweisung'),
      16 => t('PayPal'),
      17 => t('giropay'),
      18 => t('iDEAL'),
      20 => t('Homebanking AT (eps)'),
      22 => t('ePrzelewy'),
    ),
    '#default_value' => $settings['payment_methods'],
    '#description' => t('Use this parameter to restrict the payment means selectable in the Payment Page. Without any selection all active payment means of the terminal are shown.'),
    '#weight' => 15,
  );

  $form['order_identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Order identifier'),
    '#description' => t('The order identifier sent to Saferpay Gateway - check Replacement patterns'),
    '#default_value' => $settings['order_identifier'],
    '#weight' => 20,
  );
  $form['order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description'),
    '#description' => t('The order description displayed on the payment page -  check Replacement patterns'),
    '#default_value' => $settings['order_description'],
    '#weight' => 25,
  );
  $form['view'] = array(
    '#weight' => 24,
    '#theme' => 'token_tree_link',
    '#token_types' => array('commerce-order'),
);
  $form['autocomplete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Finalize payment by capture of transaction.'),
    '#default_value' => $settings['autocomplete'],
    '#weight' => 30,
  );
  $form['request_card_id'] = array(
    '#type' => 'checkbox',
    '#title' => t('Request Card ID.'),
    '#description' => t('Enable this to allow integration with the Commerce Card on File project. To be able to use this setting, Saferpay support must set this up for the configured account. Contact integration@saferpay.com.'),
    '#default_value' => $settings['request_card_id'],
    '#weight' => 35,
  );

  return $form;
}

/**
 * Returns the default settings for both payment methods.
 *
 * Defaults to the test account id and password.
 *
 * @param bool $jsonapi
 *   If jsonapi settings should be used.
 *
 * @return array
 *   The default settings
 */
function commerce_saferpay_default_settings($jsonapi = FALSE) {
  $settings = array(
    'account_id' => '401860-17795278',
    'password' => '',
    'order_identifier' => '[commerce-order:order-id]',
    'autocomplete' => TRUE,
    'order_description' => 'Order [commerce-order:order-id] at [site:name]',
    'request_card_id' => FALSE,
    'domain' => 'https://www.saferpay.com',
    'payment_methods' => array(),
  );
  if ($jsonapi) {
    $settings += array(
      'customer_id' => '401860',
      'terminal_id' => '17795278',
      'domain' => 'https://www.saferpay.com/api',
      'basic_auth_user' => '',
      'basic_auth_password' => '',
      'debug' => FALSE,
    );
  }

  return $settings;
}

/**
 * Applies default settings.
 *
 * Ensures that the test domain is used for the test account.
 *
 * @param array $settings
 *   The configured settings.
 * @param bool $jsonapi
 *   If jsonapi settings should be used.
 *
 * @return array
 *   The settings with defaults applied.
 */
function commerce_saferpay_apply_default_settings($settings, $jsonapi = FALSE) {
  // Apply default settings.
  $settings += commerce_saferpay_default_settings($jsonapi);

  // If the account_id is the test, use the test domain. This is not set
  // in default settings for existing sites that do not have a domain set.
  if (!$jsonapi) {
    if ($settings['account_id'] == '401860-17795278') {
      $settings['domain'] = 'https://test.saferpay.com';
    }
  }
  else {
    if ($settings['customer_id'] == '401860') {
      $settings['domain'] = 'https://test.saferpay.com/api';
    }
  }

  // Allow to override settings with variables.
  $settings = variable_get('commerce_saferpay_settings_overrides', array()) + $settings;

  return $settings;
}

/**
 * Returns saferpay card types.
 *
 * @return array
 *   List of card types, keyed by ID.
 */
function commerce_saferpay_get_card_types() {
  // Copied from from Saferpay SCD documentation.
  $card_types = array(
    21699 => 'Lastschrift',
    19265 => 'American Express',
    19269 => 'MasterCard',
    19274 => 'J.C.B.',
    19286 => 'Visa',
    99072 => 'Saferpay Testkarte'
  );
  return $card_types;
}

/**
 * Returns the initial payment transaction URL to redirect or post to.
 *
 * Deals with the arguments common to both payment methods.
 *
 * @param $order
 *   The order object.
 * @param $settings
 *   Array of payment method settings.
 * @param $data
 *   Array of additional arguments.
 *
 * @return
 *   URL to redirect the user to make payment.
 */
function commerce_saferpay_initpay($order, $settings, array $data = array()) {
  global $language;

  // Apply default settings.
  $settings = commerce_saferpay_apply_default_settings($settings);

  $data['ACCOUNTID'] = $settings['account_id'];

  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }

  $payment_methods = array_filter($settings['payment_methods']);
  if (!empty($payment_methods)) {
    $data['PAYMENTMETHODS'] = join(',', $payment_methods);
  }

  if (!empty($settings['request_card_id'])) {
    $data['CARDREFID'] = 'new';
  }

  // For languages that are not supported by Saferpay fall back to en.
  $data['LANGID'] = in_array($language->language, commerce_saferpay_langcodes()) ? $language->language : 'EN';

  $url = url($settings['domain'] . '/hosting/CreatePayInit.asp', array('external' => TRUE, 'query' => $data));
  $return = commerce_saferpay_process_url($url);
  if (strpos($return, 'ERROR') !== FALSE) {
    drupal_set_message(t('An error occurred during payment: @error.', array('@error' => utf8_encode($return))), 'error');
    return FALSE;
  }
  return $return;
}

/**
 * Returns a list of language codes supported by Saferpay.
 *
 * @return string[]
 */
function commerce_saferpay_langcodes() {
  return [
    'de',
    'en',
    'fr',
    'da',
    'cs',
    'es',
    'hr',
    'it',
    'hu',
    'nl',
    'no',
    'pl',
    'pt',
    'ru',
    'ro',
    'sk',
    'sl',
    'fi',
    'sv',
    'tr',
    'el',
    'ja',
    'zh'
  ];
}

/**
 * Proxy for saferpay's requests.
 *
 * @param $url
 *   The webservice prepared url, i.e. initpay, verifypayconfirm, paycomplete
 *
 * @return
 *   Webservice response.
 */
function commerce_saferpay_process_url($sUrl) {
  $ch = curl_init($sUrl);
  curl_setopt($ch, CURLOPT_PORT, 443);
  if (!variable_get('commerce_saferpay_ssl_verifypeer', TRUE)) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  }
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $sReturn = curl_exec($ch);
  curl_close($ch);
  return $sReturn;
}

/**
 * Confirms a response from Saferpay consisting of data and the signature.
 *
 * @param $data
 *   Data string to be verified.
 * @param $signature
 *   The signature given by Saferpay for the data.
 * @param array $settings
 *   The payment method settings.
 *
 * @return
 *   TRUE if the data is valid, FALSE otherwise. The actual response in case of
 *   valid data can be received through commerce_saferpay_confirm_result().
 */
function commerce_saferpay_confirm_validate($data, $signature, $settings) {
  $verify = array(
    'DATA' => $data,
    'SIGNATURE' => $signature,
  );
  $url = url($settings['domain'] . '/hosting/VerifyPayConfirm.asp', array('external' => TRUE, 'query' => $verify));
  $result = commerce_saferpay_process_url($url);

  if (drupal_substr($result, 0, 3) != 'OK:') {
    return FALSE;
  }
  commerce_saferpay_confirm_result($result);
  return TRUE;
}

/**
 * Returns or sets the confirm response returned by Saferpay.
 *
 * @param $result
 *   Overrides the currently stored result if given.
 */
function commerce_saferpay_confirm_result($result = NULL) {
  $static = &drupal_static(__FUNCTION__);
  if ($result) {
    $static = $result;
  }
  return $static;
}

/**
 * Returns a payment transaction object for a given external payment id or creates a new one.
 *
 * @param $order
 *   The order object.
 * @param $id
 *   The external id of the payment gateway.
 * @param $method_id
 *   The method id of the payment method.
 *
 * @return
 *   A commerce_payment_transaction object.
 *
 */
function commerce_saferpay_get_transaction($order, $id, $method_id)  {
  // Look for an existing transaction.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    $transaction = commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($method_id, $order->order_id);
  }
  return $transaction;
}

// SAFERPAY PP JSON API PAYMENT METHOD.

/**
 * Implements hook_menu().
 */
function commerce_saferpay_menu() {
  $items['commerce_saferpay_json/notify/%commerce_payment_method_instance/%commerce_order'] = [
    'title' => 'Saferpay payment notification',
    'page callback' => 'commerce_saferpay_json_pp_notify',
    'page arguments' => [2, 3],
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
  ];

  return $items;
}

/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_saferpay_commerce_payment_method_info() {
  $payment_methods = [];

  $payment_methods['commerce_saferpay_json_pp'] = [
    'method_id' => 'commerce_saferpay_json_pp',
    'title' => t('Saferpay JSON Payment Page'),
    'description' => t('Redirect users to submit payments through Saferpay.'),
    'active' => TRUE,
    'terminal' => FALSE,
    'offsite' => TRUE,
    'offsite_autoredirect' => 5,
  ];

  return $payment_methods;
}

/**
 * Implements CALLBACK_commerce_payment_method_settings_form().
 */
function commerce_saferpay_json_pp_settings_form($settings = NULL) {
  $form = commerce_saferpay_settings_form($settings, TRUE);
  $settings = commerce_saferpay_apply_default_settings($settings, TRUE);

  // Override default options.
  $form['order_identifier']['#description'] = t('The order identifier sent to Saferpay Gateway - check Replacement patterns. Note: even if the documentation does not mention that, calls will fail if non alphanumeric characters are used.');
  $form['domain']['#description'] = t('The saferpay domain to use, use https://test.saferpay.com/api for a test account, https://www.saferpay.com/api for production.');

  $form['customer_id'] = [
    '#type' => 'textfield',
    '#title' => t('Customer ID'),
    '#default_value' => $settings['customer_id'],
    '#weight' => 5,
  ];

  $form['terminal_id'] = [
    '#type' => 'textfield',
    '#title' => t('Terminal ID'),
    '#default_value' => $settings['terminal_id'],
    '#weight' => 6,
  ];

  $form['basic_auth_user'] = [
    '#type' => 'textfield',
    '#title' => t('Basic auth username'),
    '#description' => t('The username for the basic authentication (Settings > JSON API basic authentication).'),
    '#default_value' => $settings['basic_auth_user'],
    '#weight' => 7,
  ];

  $form['basic_auth_password'] = [
    '#type' => 'textfield',
    '#title' => t('Basic auth password'),
    '#description' => t('The password for the basic authentication (Settings > JSON API basic authentication).'),
    '#default_value' => $settings['basic_auth_password'],
    '#weight' => 8,
  ];
  $form['debug'] = [
    '#type' => 'checkbox',
    '#title' => t('Debug mode'),
    '#decription' => t('Output a more verbose log'),
    '#default_value' => $settings['debug'],
    '#weight' => 31,
  ];

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form().
 */
function commerce_saferpay_json_pp_redirect_form($form, &$form_state, $order, $payment_method) {

  // Merge defaults for case it has not been configured.
  $payment_method['settings'] = commerce_saferpay_apply_default_settings($payment_method['settings'], TRUE);

  if (empty($payment_method['settings']['customer_id'])) {
    drupal_set_message(t('Saferpay has not been configured. The test account is used. Visit the <a href="!url">payment settings</a> to change this.', ['!url' => url('admin/commerce/config/payment-methods')]), 'warning');
  }

  $url = commerce_saferpay_json_pp_initpay($order, $payment_method);

  if (!$url) {
    drupal_set_message(t('Error processing the payment. Unable to connect to the Saferpay service.'), 'error');
    drupal_goto('');
  }
  else {
    $form['#action'] = $url;

    $form['submit'] = [
      '#type' => 'submit',
      '#value' => t('Proceed to Saferpay'),
      '#weight' => 50,
    ];
  }

  return $form;
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form_validate().
 */
function commerce_saferpay_json_pp_redirect_form_validate($order, $payment_method) {
  if (!empty($payment_method['settings']['debug'])) {
    watchdog('commerce_saferpay', 'Customer returned from Saferpay.', array(), WATCHDOG_DEBUG);
  }
  return commerce_saferpay_json_pp_process($payment_method, $order);
}

/**
 * Implements CALLBACK_commerce_payment_method_redirect_form_submit().
 */
function commerce_saferpay_json_pp_redirect_form_submit($order, $payment_method) {
}

/**
 * PaymentPage Initialize api call.
 *
 * @param $order
 *   The order object.
 * @param array $payment_method
 *   Array with the payment method configuration.
 *
 * @return string|bool
 *   The string with the redirect url or false.
 */
function commerce_saferpay_json_pp_initpay($order, $payment_method) {
  global $language;

  $settings = $payment_method['settings'];

  $order_identifier = token_replace($settings['order_identifier'], ['commerce-order' => $order]);
  $order_description = token_replace($settings['order_description'], ['commerce-order' => $order]);

  $amounts = field_get_items('commerce_order', $order, 'commerce_order_total');
  $amount = array_shift($amounts);

  $data = [
    'TerminalId' => $settings['terminal_id'],
    'Payment' => [
      'Amount' => [
        'Value' => $amount['amount'],
        'CurrencyCode' => $amount['currency_code'],
      ],
      'OrderId' => $order_identifier,
      'Description' => $order_description,
    ],
    'Notification' => [
      'NotifyUrl' => url('commerce_saferpay_json/notify/' . $payment_method['instance_id'] . '/' . $order->order_id, ['absolute' => TRUE]),
    ],
    'ReturnUrls' => [
      'Success' => url('checkout/' . $order->order_id . '/payment/return/' . $order->data['payment_redirect_key'], ['absolute' => TRUE]),
      'Fail' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], ['absolute' => TRUE]),
      'Abort' => url('checkout/' . $order->order_id . '/payment/back/' . $order->data['payment_redirect_key'], ['absolute' => TRUE]),
    ],
  ];

  if (!empty($settings['payment_methods'])) {
    $enabled_payment_methods = array_filter($settings['payment_methods']);
    foreach ($enabled_payment_methods as $card_id => $card_enabled) {
      $data['PaymentMethods'][] = _commerce_saferpay_get_json_card_type_id($card_id);
    }
  }
  if (!empty($settings['request_card_id'])) {
    $data['RegisterAlias']['IdGenerator'] = 'RANDOM';
  }

  if (in_array($language->language, commerce_saferpay_langcodes())) {
    $data['Payer']['LanguageCode'] = $language->language;
  }

  $saferpay_response = commerce_saferpay_json_do_request('/Payment/v1/PaymentPage/Initialize', $order->order_id, $settings, $data);

  if (!isset($saferpay_response['RedirectUrl'])) {
    return FALSE;
  }

  $order->data['saferpay_token'] = $saferpay_response['Token'];
  commerce_order_save($order);

  return $saferpay_response['RedirectUrl'];
}

/**
 * PaymentPage Assert api call.
 *
 * @param \stdClass $order
 *   The order object.
 * @param array $payment_method
 *   The used payment method.
 *
 * @return array
 *   The result of the call.
 */
function commerce_saferpay_json_pp_assert($order, $payment_method) {
  $order_data = $order->data;
  $saferpay_response = commerce_saferpay_json_do_request('/Payment/v1/PaymentPage/Assert', $order->order_id, $payment_method['settings'], ['Token' => $order_data['saferpay_token']]);

  if ($payment_method['settings']['debug']) {
    watchdog('commerce_saferpay_json_pp', 'PaymentPage assert call finished. Order: %order_id. Status: %status. Transaction id: %transaction_id. Data %data', [
      '%order_id' => $order->order_id,
      '%status' => $saferpay_response['Transaction']['Status'],
      '%transaction_id' => $saferpay_response['Transaction']['Id'],
      '%data' => json_encode($saferpay_response, JSON_PRETTY_PRINT | JSON_UNESCAPED_SLASHES),
    ]);
  }

  return $saferpay_response;
}

/**
 * PaymentPage Capture api call.
 *
 * @param \stdClass $order
 *   The order object.
 * @param array $payment_method
 *   The used payment method.
 * @param string $transaction_id
 *   The saferpay transaction ID.
 *
 * @return array
 *   The result of the call.
 */
function commerce_saferpay_json_pp_capture($order, $payment_method, $transaction_id) {
  $data = [
    'TransactionReference' => [
      'TransactionId' => $transaction_id,
    ],
  ];

  $saferpay_response = commerce_saferpay_json_do_request('/Payment/v1/Transaction/Capture', $order->order_id, $payment_method['settings'], $data);

  if ($payment_method['settings']['debug']) {
    watchdog('commerce_saferpay_json_pp', 'Transaction capture call finished. Order: %order_id. Status: %status.', [
      '%order_id' => $order->order_id,
      '%status' => $saferpay_response['Status'],
    ]);
  }

  return $saferpay_response;
}


/**
 * Does a post request using defaults parameters.
 *
 * @param string $url
 *   The url for the request. Ie: /Payment/v1/Transaction/Capture.
 * @param string $request_id
 *   The unique identifier for this set of transactions.
 * @param $settings
 *   The payment method settings.
 * @param array $data
 *   The payload data.
 *
 * @return array|bool
 *   The response data.
 */
function commerce_saferpay_json_do_request($url, $request_id, $settings, array $data = []) {
  $headers = [
    'Content-Type' => 'application/json; charset=utf-8',
    'Accept' => 'application/json',
    'Authorization' => 'Basic ' . base64_encode($settings['basic_auth_user'] . ':' . $settings['basic_auth_password']),
  ];

  $data['RequestHeader'] = [
    'SpecVersion' => SAFERPAY_API_VERSION,
    'CustomerId' => $settings['customer_id'],
    'RequestId' => $request_id,
    'RetryIndicator' => 0,
  ];

  $response = drupal_http_request($settings['domain'] . $url, [
    'headers' => $headers,
    'method' => 'POST',
    'data' => json_encode($data),
  ]);

  if (!empty($response->data)) {
    $return_data = json_decode($response->data, TRUE);
  }

  if (isset($response->error)) {

    $variables = ['%error' => $response->error];
    if (!$return_data) {
      // No return data, log with minimal available info.
      watchdog('commerce_saferpay', 'Error: %error.', $variables, WATCHDOG_ERROR);
    }
    else {
      // @see https://saferpay.github.io/jsonapi/#errorhandling
      $variables['%error_name'] = $return_data['ErrorName'];
      $variables['%error_behavior'] = $return_data['Behavior'];
      $variables['%error_message'] = $return_data['ErrorMessage'];
      $variables['%details'] = isset($return_data['ErrorDetail'][0]) ? $return_data['ErrorDetail'][0] : '';

      // Log more information.
      watchdog('commerce_saferpay', 'Error: %error, Error name: %error_name, Behavior: %error_behavior, Message: %error_message, Details: %details.', $variables, WATCHDOG_ERROR);
    }
    return FALSE;
  }

  return $return_data;
}

/**
 * Get the json api card code from legacy id.
 *
 * @param $id
 *   The legacy id.
 *
 * @return string
 *   The card type id or empty string.
 */
function _commerce_saferpay_get_json_card_type_id($id) {
  $types = array(
    1 => 'MASTERCARD',
    2 => 'VISA',
    3 => 'AMEX',
    4 => 'DINERS',
    5 => 'JCB',
    6 => 'SAFERPAYTEST',
    8 => 'BONUS',
    9 => 'POSTFINANCE',
    10 => 'POSTCARD',
    11 => 'MAESTRO',
    12 => 'MYONE',
    13 => 'DIRECTDEBIT',
    14 => 'INVOICE',
    15 => 'SOFORT',
    16 => 'PAYPAL',
    17 => 'GIROPAY',
    18 => 'IDEAL',
    20 => 'EPS',
    22 => 'EPRZELEWY',
  );

  return isset($types[$id]) ? $types[$id] : '';
}

/**
 * Page callback for saferpay notify URL callback.
 */
function commerce_saferpay_json_pp_notify($payment_method, $order) {
  commerce_saferpay_json_pp_process($payment_method, $order);
}

/**
 * Checks the status of a payment and creates the transaction if necessary.
 *
 * @param array $payment_method
 *   Payment method definition.
 * @param object $order
 *   The commerce order.
 *
 * @return bool
 *   TRUE if the payment was either validated and processed or had already
 *   been verified.
 */
function commerce_saferpay_json_pp_process($payment_method, $order) {
  if (lock_acquire(__METHOD__)) {

    // First check if this was already processed.
    $balance_result = commerce_payment_order_balance($order);
    if ($balance_result && $balance_result['amount'] == 0) {
      // This was already paid. We can exit.
      lock_release(__METHOD__);
      return TRUE;
    }

    // PP assert.
    $assert_result = commerce_saferpay_json_pp_assert($order, $payment_method);
    if ($assert_result['Transaction']['Status'] != SAFERPAY_AUTHORIZED) {
      watchdog('commerce_saferpay_json_pp','Payment asserting for order %order_id failed. Saferpay status was %status. Saferpay transaction id was %transaction_id.', [
        '%order_id' => $order->order_id,
        '%status' => $assert_result['Transaction']['Status'],
        '%transaction_id' => $assert_result['Transaction']['Id'],
      ]);

      lock_release(__METHOD__);
      return FALSE;
    }

    $transaction = commerce_saferpay_get_transaction($order, $assert_result['Transaction']['Id'], $payment_method['method_id']);
    // Do not process the same transaction twice.
    if (empty($transaction->is_new)) {
      lock_release(__METHOD__);
      return TRUE;
    }

    $transaction->remote_id = $assert_result['Transaction']['Id'];
    $transaction->amount = $assert_result['Transaction']['Amount']['Value'];
    $transaction->currency_code = $assert_result['Transaction']['Amount']['CurrencyCode'];
    $transaction->payload['assert_result'] = $assert_result;

    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->message = t('Transaction has been reserved.');

    // @todo Check if we need this default settings.
    // $settings = commerce_saferpay_apply_default_settings($payment_method['settings']);
    // PP capture.
    if (isset($payment_method['settings']['autocomplete']) && $payment_method['settings']['autocomplete']) {
      $capture_result = commerce_saferpay_json_pp_capture($order, $payment_method, $assert_result['Transaction']['Id']);

      if ($capture_result['Status'] == SAFERPAY_CAPTURED) {
        $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
        $transaction->message = t('Successfully completed the payment.');
      }
      else {
        $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
        $transaction->message = t('Failed to complete payment: @error', array('@error' => $capture_result));
      }
    }

    $cardonfile_exists = module_exists('commerce_cardonfile');
    if ($cardonfile_exists && $payment_method['settings']['request_card_id']) {

      if (!empty($assert_result['RegistrationResult']['Alias']['Id'])) {
        // @see commerce_payment_credit_card_types()
        $type_mapping = array(
          'visa' => 'VISA',
          'mastercard' => 'MASTERCARD',
          'dc' => 'DINERS',
          'jcb' => 'JCB',
          'maestro' => 'MAESTRO',
        );

        $saferpay_card_type = $assert_result['PaymentMeans']['Brand']['PaymentMethod'];
        $card_type = in_array($saferpay_card_type, $type_mapping) ? array_search($saferpay_card_type, $type_mapping) : '';

        $card_data = array(
          'uid' => $order->uid,
          'payment_method' => $payment_method['method_id'],
          'instance_id' => $payment_method['instance_id'],
          'remote_id' => $assert_result['RegistrationResult']['Alias']['Id'],
          'card_type' => $card_type,
          'card_name' => '',
          'card_number' => substr($assert_result['PaymentMeans']['Card']['MaskedNumber'], -4),
          'card_exp_month' => $assert_result['PaymentMeans']['Card']['ExpMonth'],
          'card_exp_year' => $assert_result['PaymentMeans']['Card']['ExpYear'],
          'status' => 1,
        );
        // Save new card on file.
        commerce_cardonfile_data_save($card_data);

        // Store the card information in order.
        $transaction->payload['cardonfile'] = $card_data['card_id'];
      }
      else {
        watchdog('commerce_saferpay', 'No alias received for transaction @id', array('@id' => $assert_result['Transaction']['Id']), WATCHDOG_ERROR);
      }
    }

    commerce_payment_transaction_save($transaction);
    lock_release(__METHOD__);
  }

}
