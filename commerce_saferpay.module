<?php

/**
 * @file
 * Module for for base Commerce Saferpay module.
 */

/**
 * Common settings form elements.
 *
 * @param $settings
 *   An array of the current settings.
 * @return
 *   A form snippet.
 *
 * @see CALLBACK_commerce_payment_method_settings_form()
 */
function commerce_saferpay_settings_form($settings = NULL) {

  $settings = commerce_saferpay_apply_default_settings($settings);

  $form['account_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Account ID'),
    '#description' => t('You can derive the AccountID as follows: CUSTOMERID-TERMINALID, i.e. 401860-17795278 (See https://www.six-payment-services.com/en/site/saferpay-support/testaccount/general_test_account.html)'),
    '#default_value' => $settings['account_id'],
  );

  $form['password'] = array(
    '#type' => 'textfield',
    '#title' => t('spPassword'),
    '#description' => t('This is only kept for backwards compatibility and is not needed anymore.'),
    '#default_value' => $settings['password'],
  );
  $form['domain'] = array(
    '#type' => 'textfield',
    '#title' => t('Domain'),
    '#description' => t('The saferpay domain to use, use https://test.saferpay.com for a test account, https://www.saferpay.com for production..'),
    '#default_value' => $settings['domain'],
  );

  $form['payment_methods'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Enabled payment methods'),
    '#options' => array(
      1 => t('MasterCard'),
      2 => t('Visa'),
      3 => t('American Express'),
      4 => t('Diners Club'),
      5 => t('JCB'),
      6 => t('Saferpay Testkarte'),
      8 => t('Bonus Card'),
      9 => t('PostFinance E-Finance'),
      10 => t('PostFinance Card'),
      11 => t('Maestro International'),
      12 => t('MyOne'),
      13 => t('Direct debit (ELV)'),
      14 => t('Invoice'),
      15 => t('SofortÃ¼berweisung'),
      16 => t('PayPal'),
      17 => t('giropay'),
      18 => t('iDEAL'),
      20 => t('Homebanking AT (eps)'),
      22 => t('ePrzelewy'),
    ),
    '#default_value' => $settings['payment_methods'],
    '#description' => t('Use this parameter to restrict the payment means selectable in the Payment Page. Without any selection all active payment means of the terminal are shown.'),
  );

  $form['order_identifier'] = array(
    '#type' => 'textfield',
    '#title' => t('Order identifier'),
    '#description' => t('The order identifier sent to Saferpay Gateway - check Replacement patterns'),
    '#default_value' => $settings['order_identifier'],
  );
  $form['order_description'] = array(
    '#type' => 'textfield',
    '#title' => t('Order description'),
    '#description' => t('The order description displayed on the payment page -  check Replacement patterns'),
    '#default_value' => $settings['order_description'],
  );
  $form['view']['token_help'] = array(
    '#title' => t('Replacement patterns'),
    '#type' => 'fieldset',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['view']['token_help']['help'] = array(
    '#theme' => 'token_tree',
    '#token_types' => array('commerce-order'),
  );
  $form['autocomplete'] = array(
    '#type' => 'checkbox',
    '#title' => t('Auto Finalize payment by capture of transaction.'),
    '#default_value' => $settings['autocomplete'],
  );
  $form['request_card_id'] = array(
    '#type' => 'checkbox',
    '#title' => t('Request Card ID.'),
    '#description' => t('Enable this to allow integration with the Commerce Card on File project. To be able to use this setting, Saferpay support must set this up for the configured account. Contact integration@saferpay.com.'),
    '#default_value' => $settings['request_card_id'],
  );

  return $form;
}

/**
 * Returns the default settings for both payment methods.
 *
 * Defaults to the test account id and password.
 */
function commerce_saferpay_default_settings() {
  return array(
    'account_id' => '401860-17795278',
    'password' => '',
    'order_identifier' => '[commerce-order:order-id]-[commerce-order:created]',
    'autocomplete' => TRUE,
    'order_description' => 'Order [commerce-order:order-id] at [site:name]',
    'request_card_id' => FALSE,
    'domain' => 'https://www.saferpay.com',
  );
}

/**
 * Applies default settings.
 *
 * Ensures that the test domain is used for the test account.
 *
 * @param array $settings
 *   The configured settings.
 *
 * @return array
 *   The settings with defaults applied.
 */
function commerce_saferpay_apply_default_settings($settings) {
  // Apply default settings.
  $settings += commerce_saferpay_default_settings();

  // If the account_id is the test, use the test domain. This is not set
  // in default settings for existing sites that do not have a domain set.
  if ($settings['account_id'] == '401860-17795278') {
    $settings['domain'] = 'https://test.saferpay.com';
  }

  return $settings;
}

/**
 * Returns saferpay card types.
 *
 * @return array
 *   List of card types, keyed by ID.
 */
function commerce_saferpay_get_card_types() {
  // Copied from from Saferpay SCD documentation.
  $card_types = array(
    21699 => 'Lastschrift',
    19265 => 'American Express',
    19269 => 'MasterCard',
    19274 => 'J.C.B.',
    19286 => 'Visa',
    99072 => 'Saferpay Testkarte'
  );
  return $card_types;
}

/**
 * Returns the initial payment transaction URL to redirect or post to.
 *
 * Deals with the arguments common to both payment methods.
 *
 * @param $order
 *   The order object.
 * @param $settings
 *   Array of payment method settings.
 * @param $data
 *   Array of additional arguments.
 *
 * @return
 *   URL to redirect the user to make payment.
 */
function commerce_saferpay_initpay($order, $settings, array $data = array()) {
  global $language;

  // Apply default settings.
  $settings = commerce_saferpay_apply_default_settings($settings);

  $data['ACCOUNTID'] = $settings['account_id'];

  if (!empty($settings['password'])) {
    $data['spPassword'] = $settings['password'];
  }

  $payment_methods = array_filter($settings['payment_methods']);
  if (!empty($payment_methods)) {
    $data['PAYMENTMETHODS'] = join(',', $payment_methods);
  }

  if (!empty($settings['request_card_id'])) {
    $data['CARDREFID'] = 'new';
  }

  // For languages that are not supported by Saferpay fall back to en.
  $data['LANGID'] = in_array($language->language, array('de', 'en', 'fr', 'da', 'cs', 'es', 'hr', 'it', 'hu', 'nl', 'no', 'pl', 'pt', 'ru', 'ro', 'sk', 'sl', 'fi', 'sv', 'tr', 'el', 'ja', 'zh')) ? $language->language : 'EN';

  $url = url($settings['domain'] . '/hosting/CreatePayInit.asp', array('external' => TRUE, 'query' => $data));
  $return = commerce_saferpay_process_url($url);
  if (strpos($return, 'ERROR') !== FALSE) {
    drupal_set_message(t('An error occurred during payment: @error.', array('@error' => utf8_encode($return))), 'error');
    return FALSE;
  }
  return $return;
}

/**
 * Proxy for saferpay's requests.
 *
 * @param $url
 *   The webservice prepared url, i.e. initpay, verifypayconfirm, paycomplete
 *
 * @return
 *   Webservice response.
 */
function commerce_saferpay_process_url($sUrl) {
  $ch = curl_init($sUrl);
  curl_setopt($ch, CURLOPT_PORT, 443);
  if (!variable_get('commerce_saferpay_ssl_verifypeer', TRUE)) {
    curl_setopt($ch, CURLOPT_SSL_VERIFYPEER, FALSE);
  }
  curl_setopt($ch, CURLOPT_HEADER, 0);
  curl_setopt($ch, CURLOPT_RETURNTRANSFER, TRUE);
  $sReturn = curl_exec($ch);
  curl_close($ch);
  return $sReturn;
}

/**
 * Confirms a response from Saferpay consisting of data and the signature.
 *
 * @param $data
 *   Data string to be verified.
 * @param $signature
 *   The signature given by Saferpay for the data.
 * @param array $settings
 *   The payment method settings.
 *
 * @return
 *   TRUE if the data is valid, FALSE otherwise. The actual response in case of
 *   valid data can be received through commerce_saferpay_confirm_result().
 */
function commerce_saferpay_confirm_validate($data, $signature, $settings) {
  $verify = array(
    'DATA' => $data,
    'SIGNATURE' => $signature,
  );
  $url = url($settings['domain'] . '/hosting/VerifyPayConfirm.asp', array('external' => TRUE, 'query' => $verify));
  $result = commerce_saferpay_process_url($url);

  if (drupal_substr($result, 0, 3) != 'OK:') {
    return FALSE;
  }
  commerce_saferpay_confirm_result($result);
  return TRUE;
}

/**
 * Returns or sets the confirm response returned by Saferpay.
 *
 * @param $result
 *   Overrides the currently stored result if given.
 */
function commerce_saferpay_confirm_result($result = NULL) {
  $static = &drupal_static(__FUNCTION__);
  if ($result) {
    $static = $result;
  }
  return $static;
}

/**
 * Returns a payment transaction object for a given external payment id or creates a new one.
 *
 * @param $order
 *   The order object.
 * @param $id
 *   The external id of the payment gateway.
 * @param $method_id
 *   The method id of the payment method.
 *
 * @return
 *   A commerce_payment_transaction object.
 *
 */
function commerce_saferpay_get_transaction($order, $id, $method_id)  {
  // Look for an existing transaction.
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'commerce_payment_transaction')
    ->propertyCondition('remote_id', $id)
    ->execute();

  if (!empty($result['commerce_payment_transaction'])) {
    $transaction = commerce_payment_transaction_load(key($result['commerce_payment_transaction']));
  }
  else {
    // Create a new payment transaction for the order.
    $transaction = commerce_payment_transaction_new($method_id, $order->order_id);
  }
  return $transaction;
}
